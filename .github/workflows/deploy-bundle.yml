name: Fetch and deploy bundle

on:
    workflow_call:
        inputs:
            tag-version:
                required: true
                type: string
            environment:
                required: true
                type: string
            stack:
                required: true
                type: string
            notify-slack:
                required: false
                type: boolean
                default: true
        secrets:
            AWS_DEV_ROLE:
                required: true
            AWS_STAGING_ROLE:
                required: true
            AWS_PROD_ROLE:
                required: true
            AWS_CICD_ROLE:
                required: true
            AWS_CICD_ACCESS_KEY:
                required: true
            AWS_CICD_SECRET_KEY:
                required: true
            SLACK_WEBHOOK:
                required: false

jobs:
    deploy:
        name: Build
        runs-on: ubuntu-latest
        timeout-minutes: 30
        steps:
        - name: Configure aws DEV credentials
          if: inputs.env == 'dev'
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_CICD_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_CICD_SECRET_KEY }}
            aws-region: "us-east-1"
            role-to-assume: ${{ secrets.AWS_DEV_ROLE }}
            role-duration-seconds: 43200
            role-session-name: GitActionDeploymentSession
        - name: Configure aws STAGING credentials
          if: inputs.env == 'staging'
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_CICD_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_CICD_SECRET_KEY }}
            aws-region: "us-east-1"
            role-to-assume: ${{ secrets.AWS_STAGING_ROLE }}
            role-duration-seconds: 43200
            role-session-name: GitActionDeploymentSession
        - name: Configure aws PROD credentials
          if: inputs.env == 'prod'
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_CICD_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_CICD_SECRET_KEY }}
            aws-region: "eu-west-1"
            role-to-assume: ${{ secrets.AWS_PROD_ROLE }}
            role-duration-seconds: 43200
            role-session-name: GitActionDeploymentSession

        - name: Setup NodeJS
          uses: actions/setup-node@v3
          with:
              node-version: "18"
              cache: "npm"
              cache-dependency-path: "**/package-lock.json"
              registry-url: https://npm.pkg.github.com/
        - name: Prerequisite Installation
          run: npm install -g aws-cdk
        - name: Retrieve bundle
          run: |
              aws s3 cp s3://bastion-bundles/${{ github.repository }}/${{ inputs.tag-version }}/${{ inputs.env }} ./bundle --recursive
        - name: CDK Diff from artifacts
          uses: youyo/aws-cdk-github-actions@v2
          with:
            cdk_subcommand: diff
            working_directory: ./bundle
            cdk_stack: ${{ inputs.stack }}
            cdk_args: --require-approval never --app 'cdk.out/'

        - name: Slack Notification
          if: "${{ failure() && inputs.notify-slack }}"
          uses: rtCamp/action-slack-notify@v2
          env:
            SLACK_CHANNEL: github-cis-${{ inputs.env }}}
            SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
            SLACK_ICON: https://github.com/rtCamp.png?size=48
            SLACK_MESSAGE: ":spongebobbing:"
            SLACK_TITLE: ":spongebobbing: ${{ github.repository }} ${{ inputs.stack }}@${{ inputs.tag-version }} deployed :rocket:"
            SLACK_USERNAME: "Bob"
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
