name: Build and upload bundles

on:
    workflow_call:
        inputs:
            bundle-path: 
                required: true
                type: string
            repo-name:
                required: true
                type: string
            tag-version:
                required: true
                type: string
            ref:
                required: false
                type: string
            working-directory:
                required: false
                type: string
                default: "./cdk"
            notify-slack:
                required: false
                type: boolean
                default: true
        secrets:
            AWS_DEV_ROLE:
                required: true
            AWS_STAGING_ROLE:
                required: true
            AWS_PROD_ROLE:
                required: true
            AWS_CICD_ROLE:
                required: true
            AWS_CICD_ACCESS_KEY:
                required: true
            AWS_CICD_SECRET_KEY:
                required: true
            SLACK_WEBHOOK:
                required: false

jobs:
    deploy:
        strategy:
          matrix:
            include:
              - environment: dev
                build_secret: AWS_DEV_ROLE
                region: us-east-1
              - environment: staging
                build_secret: AWS_STAGING_ROLE
                region: us-east-1
              - environment: prod
                build_secret: AWS_PROD_ROLE
                region: eu-west-1
        defaults:
            run:
                working-directory: ${{ inputs.working-directory }}
        name: Build
        runs-on: ubuntu-latest
        timeout-minutes: 30
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.event.inputs.ref }}
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Setup NodeJS
              uses: actions/setup-node@v3
              with:
                  node-version: "18"
                  cache: "npm"
                  cache-dependency-path: "**/package-lock.json"
                  registry-url: https://npm.pkg.github.com/
            - name: Prerequisite Installation
              run: npm install -g aws-cdk esbuild

            - name: install dependencies
              run: |
                  if [ -f "install.sh" ]
                    then
                        echo "install.sh script found! running it";
                        chmod 700 install.sh
                        ./install.sh
                    else
                       echo "install.sh script NOT found! running `npm ci`";
                       cd ..;
                       npm ci;
                  fi
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Configure AWS credentials for build
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_CICD_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_CICD_SECRET_KEY }}
                  aws-region: ${{ matrix.region }}
                  role-to-assume: ${{ secrets[matrix.build_secret] }}
                  role-duration-seconds: 1800
                  role-session-name: GitActionDeploymentSession
            - name: Build
              run: |
                  chmod 700 build.sh
                  ./build.sh ${{ matrix.environment }};
              env:
                  GH_PACKAGE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Configure AWS credentials for upload
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_CICD_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_CICD_SECRET_KEY }}
                  aws-region: us-east-1
                  role-to-assume: ${{ secrets.AWS_CICD_ROLE }}
                  role-duration-seconds: 1800
                  role-session-name: GitActionDeploymentSession
            - name: Upload
              run: |
                echo $(pwd);
                aws s3 cp ${{ inputs.bundle-path }} s3://bastion-bundles/${{ inputs.repo-name }}/${{ inputs.tag-version }} --no-follow-symlinks --recursive

                touch ./success.txt;
                aws s3 cp ./success.txt s3://bastion-bundles/${{ inputs.repo-name }}/${{ inputs.tag-version }}/success.txt

            - name: Set Slack Webhook name
              id: slack-webhook-name
              run: |
                  ENVIRONMENT=${{ matrix.environment }}
                  echo "SLACK_WEBHOOK_NAME=SLACK_WEBHOOK_${ENVIRONMENT^^}" >> "$GITHUB_ENV"
            - name: Slack Notification - Failure
              if: "${{ failure() && inputs.notify-slack }}"
              uses: rtCamp/action-slack-notify@v2
              env:
                SLACK_ICON: https://avatars.githubusercontent.com/u/138620007?size=96
                SLACK_TITLE: "Bundling Failed"
                SLACK_MESSAGE: ":sad_nautilus: Bundling of ${{ inputs.repo-name }}@${{ inputs.tag-version }} in ${{ matrix.environment }} failed"
                SLACK_USERNAME: "Nautilus"
                MSG_MINIMAL: actions url
                SLACK_COLOR: ${{ job.status }}
                SLACK_WEBHOOK: ${{ secrets[env.SLACK_WEBHOOK_NAME] }}
